//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  data_post: Data_Post;
  data_postConnection: Data_PostConnection;
  pages: Pages;
  pagesConnection: PagesConnection;
  site_content: Site_Content;
  site_contentConnection: Site_ContentConnection;
  post: Post;
  postConnection: PostConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryData_PostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryData_PostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Data_PostFilter>;
};


export type QueryPagesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPagesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
};


export type QuerySite_ContentArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySite_ContentConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Site_ContentFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};

export type DocumentFilter = {
  data_post?: InputMaybe<Data_PostFilter>;
  pages?: InputMaybe<PagesFilter>;
  site_content?: InputMaybe<Site_ContentFilter>;
  post?: InputMaybe<PostFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Data_Post | Pages | Site_Content | Post | Folder;

export type Data_Post = Node & Document & {
  __typename?: 'Data_post';
  title: Scalars['String']['output'];
  date?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Data_PostFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Data_PostConnectionEdges = {
  __typename?: 'Data_postConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Data_Post>;
};

export type Data_PostConnection = Connection & {
  __typename?: 'Data_postConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Data_PostConnectionEdges>>>;
};

export type PagesHero = {
  __typename?: 'PagesHero';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  video?: Maybe<Scalars['String']['output']>;
  videoPoster?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsIntro = {
  __typename?: 'PagesSectionsIntro';
  title?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['JSON']['output']>;
};

export type PagesSectionsStatsStats = {
  __typename?: 'PagesSectionsStatsStats';
  label?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsStats = {
  __typename?: 'PagesSectionsStats';
  title?: Maybe<Scalars['String']['output']>;
  stats?: Maybe<Array<Maybe<PagesSectionsStatsStats>>>;
};

export type PagesSectionsValuesItems = {
  __typename?: 'PagesSectionsValuesItems';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsValues = {
  __typename?: 'PagesSectionsValues';
  title?: Maybe<Scalars['String']['output']>;
  items?: Maybe<Array<Maybe<PagesSectionsValuesItems>>>;
};

export type PagesSectionsImage_TextImage = {
  __typename?: 'PagesSectionsImage_textImage';
  src?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsImage_TextButton = {
  __typename?: 'PagesSectionsImage_textButton';
  text?: Maybe<Scalars['String']['output']>;
  href?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsImage_Text = {
  __typename?: 'PagesSectionsImage_text';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['JSON']['output']>;
  highlight?: Maybe<Scalars['String']['output']>;
  image?: Maybe<PagesSectionsImage_TextImage>;
  button?: Maybe<PagesSectionsImage_TextButton>;
};

export type PagesSectionsCtaButton = {
  __typename?: 'PagesSectionsCtaButton';
  text?: Maybe<Scalars['String']['output']>;
  href?: Maybe<Scalars['String']['output']>;
  style?: Maybe<Scalars['String']['output']>;
};

export type PagesSectionsCta = {
  __typename?: 'PagesSectionsCta';
  title?: Maybe<Scalars['String']['output']>;
  content?: Maybe<Scalars['JSON']['output']>;
  button?: Maybe<PagesSectionsCtaButton>;
};

export type PagesSections = PagesSectionsIntro | PagesSectionsStats | PagesSectionsValues | PagesSectionsImage_Text | PagesSectionsCta;

export type Pages = Node & Document & {
  __typename?: 'Pages';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  hero?: Maybe<PagesHero>;
  sections?: Maybe<Array<Maybe<PagesSections>>>;
  mission?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type PagesHeroFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  video?: InputMaybe<StringFilter>;
  videoPoster?: InputMaybe<ImageFilter>;
};

export type PagesSectionsIntroFilter = {
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
};

export type PagesSectionsStatsStatsFilter = {
  label?: InputMaybe<StringFilter>;
  value?: InputMaybe<StringFilter>;
};

export type PagesSectionsStatsFilter = {
  title?: InputMaybe<StringFilter>;
  stats?: InputMaybe<PagesSectionsStatsStatsFilter>;
};

export type PagesSectionsValuesItemsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type PagesSectionsValuesFilter = {
  title?: InputMaybe<StringFilter>;
  items?: InputMaybe<PagesSectionsValuesItemsFilter>;
};

export type PagesSectionsImage_TextImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type PagesSectionsImage_TextButtonFilter = {
  text?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type PagesSectionsImage_TextFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
  highlight?: InputMaybe<StringFilter>;
  image?: InputMaybe<PagesSectionsImage_TextImageFilter>;
  button?: InputMaybe<PagesSectionsImage_TextButtonFilter>;
};

export type PagesSectionsCtaButtonFilter = {
  text?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
};

export type PagesSectionsCtaFilter = {
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
  button?: InputMaybe<PagesSectionsCtaButtonFilter>;
};

export type PagesSectionsFilter = {
  intro?: InputMaybe<PagesSectionsIntroFilter>;
  stats?: InputMaybe<PagesSectionsStatsFilter>;
  values?: InputMaybe<PagesSectionsValuesFilter>;
  image_text?: InputMaybe<PagesSectionsImage_TextFilter>;
  cta?: InputMaybe<PagesSectionsCtaFilter>;
};

export type PagesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  hero?: InputMaybe<PagesHeroFilter>;
  sections?: InputMaybe<PagesSectionsFilter>;
  mission?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PagesConnectionEdges = {
  __typename?: 'PagesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Pages>;
};

export type PagesConnection = Connection & {
  __typename?: 'PagesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;
};

export type Site_Content = Node & Document & {
  __typename?: 'Site_content';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Site_ContentFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type Site_ContentConnectionEdges = {
  __typename?: 'Site_contentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Site_Content>;
};

export type Site_ContentConnection = Connection & {
  __typename?: 'Site_contentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Site_ContentConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateData_post: Data_Post;
  createData_post: Data_Post;
  updatePages: Pages;
  createPages: Pages;
  updateSite_content: Site_Content;
  createSite_content: Site_Content;
  updatePost: Post;
  createPost: Post;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateData_PostArgs = {
  relativePath: Scalars['String']['input'];
  params: Data_PostMutation;
};


export type MutationCreateData_PostArgs = {
  relativePath: Scalars['String']['input'];
  params: Data_PostMutation;
};


export type MutationUpdatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};


export type MutationCreatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};


export type MutationUpdateSite_ContentArgs = {
  relativePath: Scalars['String']['input'];
  params: Site_ContentMutation;
};


export type MutationCreateSite_ContentArgs = {
  relativePath: Scalars['String']['input'];
  params: Site_ContentMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};

export type DocumentUpdateMutation = {
  data_post?: InputMaybe<Data_PostMutation>;
  pages?: InputMaybe<PagesMutation>;
  site_content?: InputMaybe<Site_ContentMutation>;
  post?: InputMaybe<PostMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  data_post?: InputMaybe<Data_PostMutation>;
  pages?: InputMaybe<PagesMutation>;
  site_content?: InputMaybe<Site_ContentMutation>;
  post?: InputMaybe<PostMutation>;
};

export type Data_PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PagesHeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  video?: InputMaybe<Scalars['String']['input']>;
  videoPoster?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsIntroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
};

export type PagesSectionsStatsStatsMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsStatsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<PagesSectionsStatsStatsMutation>>>;
};

export type PagesSectionsValuesItemsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsValuesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<PagesSectionsValuesItemsMutation>>>;
};

export type PagesSectionsImage_TextImageMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsImage_TextButtonMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsImage_TextMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  highlight?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<PagesSectionsImage_TextImageMutation>;
  button?: InputMaybe<PagesSectionsImage_TextButtonMutation>;
};

export type PagesSectionsCtaButtonMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSectionsCtaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  button?: InputMaybe<PagesSectionsCtaButtonMutation>;
};

export type PagesSectionsMutation = {
  intro?: InputMaybe<PagesSectionsIntroMutation>;
  stats?: InputMaybe<PagesSectionsStatsMutation>;
  values?: InputMaybe<PagesSectionsValuesMutation>;
  image_text?: InputMaybe<PagesSectionsImage_TextMutation>;
  cta?: InputMaybe<PagesSectionsCtaMutation>;
};

export type PagesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<PagesHeroMutation>;
  sections?: InputMaybe<Array<InputMaybe<PagesSectionsMutation>>>;
  mission?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Site_ContentMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Data_PostPartsFragment = { __typename: 'Data_post', title: string, date?: string | null, description?: string | null, body?: any | null };

export type PagesPartsFragment = { __typename: 'Pages', title: string, description?: string | null, mission?: string | null, body?: any | null, hero?: { __typename: 'PagesHero', title?: string | null, subtitle?: string | null, image?: string | null, video?: string | null, videoPoster?: string | null } | null, sections?: Array<{ __typename: 'PagesSectionsIntro', title?: string | null, content?: any | null } | { __typename: 'PagesSectionsStats', title?: string | null, stats?: Array<{ __typename: 'PagesSectionsStatsStats', label?: string | null, value?: string | null } | null> | null } | { __typename: 'PagesSectionsValues', title?: string | null, items?: Array<{ __typename: 'PagesSectionsValuesItems', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | { __typename: 'PagesSectionsImage_text', title?: string | null, subtitle?: string | null, content?: any | null, highlight?: string | null, image?: { __typename: 'PagesSectionsImage_textImage', src?: string | null, alt?: string | null } | null, button?: { __typename: 'PagesSectionsImage_textButton', text?: string | null, href?: string | null, style?: string | null } | null } | { __typename: 'PagesSectionsCta', title?: string | null, content?: any | null, button?: { __typename: 'PagesSectionsCtaButton', text?: string | null, href?: string | null, style?: string | null } | null } | null> | null };

export type Site_ContentPartsFragment = { __typename: 'Site_content', title: string, description?: string | null, body?: any | null };

export type PostPartsFragment = { __typename: 'Post', title: string, body?: any | null };

export type Data_PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Data_PostQuery = { __typename?: 'Query', data_post: { __typename: 'Data_post', id: string, title: string, date?: string | null, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Data_PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Data_PostFilter>;
}>;


export type Data_PostConnectionQuery = { __typename?: 'Query', data_postConnection: { __typename?: 'Data_postConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Data_postConnectionEdges', cursor: string, node?: { __typename: 'Data_post', id: string, title: string, date?: string | null, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PagesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PagesQuery = { __typename?: 'Query', pages: { __typename: 'Pages', id: string, title: string, description?: string | null, mission?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PagesHero', title?: string | null, subtitle?: string | null, image?: string | null, video?: string | null, videoPoster?: string | null } | null, sections?: Array<{ __typename: 'PagesSectionsIntro', title?: string | null, content?: any | null } | { __typename: 'PagesSectionsStats', title?: string | null, stats?: Array<{ __typename: 'PagesSectionsStatsStats', label?: string | null, value?: string | null } | null> | null } | { __typename: 'PagesSectionsValues', title?: string | null, items?: Array<{ __typename: 'PagesSectionsValuesItems', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | { __typename: 'PagesSectionsImage_text', title?: string | null, subtitle?: string | null, content?: any | null, highlight?: string | null, image?: { __typename: 'PagesSectionsImage_textImage', src?: string | null, alt?: string | null } | null, button?: { __typename: 'PagesSectionsImage_textButton', text?: string | null, href?: string | null, style?: string | null } | null } | { __typename: 'PagesSectionsCta', title?: string | null, content?: any | null, button?: { __typename: 'PagesSectionsCtaButton', text?: string | null, href?: string | null, style?: string | null } | null } | null> | null } };

export type PagesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
}>;


export type PagesConnectionQuery = { __typename?: 'Query', pagesConnection: { __typename?: 'PagesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PagesConnectionEdges', cursor: string, node?: { __typename: 'Pages', id: string, title: string, description?: string | null, mission?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PagesHero', title?: string | null, subtitle?: string | null, image?: string | null, video?: string | null, videoPoster?: string | null } | null, sections?: Array<{ __typename: 'PagesSectionsIntro', title?: string | null, content?: any | null } | { __typename: 'PagesSectionsStats', title?: string | null, stats?: Array<{ __typename: 'PagesSectionsStatsStats', label?: string | null, value?: string | null } | null> | null } | { __typename: 'PagesSectionsValues', title?: string | null, items?: Array<{ __typename: 'PagesSectionsValuesItems', title?: string | null, description?: string | null, icon?: string | null } | null> | null } | { __typename: 'PagesSectionsImage_text', title?: string | null, subtitle?: string | null, content?: any | null, highlight?: string | null, image?: { __typename: 'PagesSectionsImage_textImage', src?: string | null, alt?: string | null } | null, button?: { __typename: 'PagesSectionsImage_textButton', text?: string | null, href?: string | null, style?: string | null } | null } | { __typename: 'PagesSectionsCta', title?: string | null, content?: any | null, button?: { __typename: 'PagesSectionsCtaButton', text?: string | null, href?: string | null, style?: string | null } | null } | null> | null } | null } | null> | null } };

export type Site_ContentQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Site_ContentQuery = { __typename?: 'Query', site_content: { __typename: 'Site_content', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Site_ContentConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Site_ContentFilter>;
}>;


export type Site_ContentConnectionQuery = { __typename?: 'Query', site_contentConnection: { __typename?: 'Site_contentConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Site_contentConnectionEdges', cursor: string, node?: { __typename: 'Site_content', id: string, title: string, description?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const Data_PostPartsFragmentDoc = gql`
    fragment Data_postParts on Data_post {
  __typename
  title
  date
  description
  body
}
    `;
export const PagesPartsFragmentDoc = gql`
    fragment PagesParts on Pages {
  __typename
  title
  description
  hero {
    __typename
    title
    subtitle
    image
    video
    videoPoster
  }
  sections {
    __typename
    ... on PagesSectionsIntro {
      title
      content
    }
    ... on PagesSectionsStats {
      title
      stats {
        __typename
        label
        value
      }
    }
    ... on PagesSectionsValues {
      title
      items {
        __typename
        title
        description
        icon
      }
    }
    ... on PagesSectionsImage_text {
      title
      subtitle
      content
      highlight
      image {
        __typename
        src
        alt
      }
      button {
        __typename
        text
        href
        style
      }
    }
    ... on PagesSectionsCta {
      title
      content
      button {
        __typename
        text
        href
        style
      }
    }
  }
  mission
  body
}
    `;
export const Site_ContentPartsFragmentDoc = gql`
    fragment Site_contentParts on Site_content {
  __typename
  title
  description
  body
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  body
}
    `;
export const Data_PostDocument = gql`
    query data_post($relativePath: String!) {
  data_post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Data_postParts
  }
}
    ${Data_PostPartsFragmentDoc}`;
export const Data_PostConnectionDocument = gql`
    query data_postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Data_postFilter) {
  data_postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Data_postParts
      }
    }
  }
}
    ${Data_PostPartsFragmentDoc}`;
export const PagesDocument = gql`
    query pages($relativePath: String!) {
  pages(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PagesParts
  }
}
    ${PagesPartsFragmentDoc}`;
export const PagesConnectionDocument = gql`
    query pagesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PagesFilter) {
  pagesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PagesParts
      }
    }
  }
}
    ${PagesPartsFragmentDoc}`;
export const Site_ContentDocument = gql`
    query site_content($relativePath: String!) {
  site_content(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Site_contentParts
  }
}
    ${Site_ContentPartsFragmentDoc}`;
export const Site_ContentConnectionDocument = gql`
    query site_contentConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Site_contentFilter) {
  site_contentConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Site_contentParts
      }
    }
  }
}
    ${Site_ContentPartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      data_post(variables: Data_PostQueryVariables, options?: C): Promise<{data: Data_PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Data_PostQueryVariables, query: string}> {
        return requester<{data: Data_PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Data_PostQueryVariables, query: string}, Data_PostQueryVariables>(Data_PostDocument, variables, options);
      },
    data_postConnection(variables?: Data_PostConnectionQueryVariables, options?: C): Promise<{data: Data_PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Data_PostConnectionQueryVariables, query: string}> {
        return requester<{data: Data_PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Data_PostConnectionQueryVariables, query: string}, Data_PostConnectionQueryVariables>(Data_PostConnectionDocument, variables, options);
      },
    pages(variables: PagesQueryVariables, options?: C): Promise<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}> {
        return requester<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}, PagesQueryVariables>(PagesDocument, variables, options);
      },
    pagesConnection(variables?: PagesConnectionQueryVariables, options?: C): Promise<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}> {
        return requester<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}, PagesConnectionQueryVariables>(PagesConnectionDocument, variables, options);
      },
    site_content(variables: Site_ContentQueryVariables, options?: C): Promise<{data: Site_ContentQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Site_ContentQueryVariables, query: string}> {
        return requester<{data: Site_ContentQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Site_ContentQueryVariables, query: string}, Site_ContentQueryVariables>(Site_ContentDocument, variables, options);
      },
    site_contentConnection(variables?: Site_ContentConnectionQueryVariables, options?: C): Promise<{data: Site_ContentConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Site_ContentConnectionQueryVariables, query: string}> {
        return requester<{data: Site_ContentConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Site_ContentConnectionQueryVariables, query: string}, Site_ContentConnectionQueryVariables>(Site_ContentConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  