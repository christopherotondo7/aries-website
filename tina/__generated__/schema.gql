# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Folder

type PageHeroButtons {
  text: String
  href: String
  style: String
}

type PageHero {
  title: String
  subtitle: String
  buttons: [PageHeroButtons]
}

type PageBlocksTextBlock {
  title: String
  content: JSON
  background: String
}

type PageBlocksStatsBlockStats {
  number: String
  label: String
  description: String
}

type PageBlocksStatsBlock {
  title: String
  subtitle: String
  stats: [PageBlocksStatsBlockStats]
}

type PageBlocksFeatureGridFeatures {
  title: String
  description: String
  icon: String
}

type PageBlocksFeatureGrid {
  title: String
  subtitle: String
  columns: String
  features: [PageBlocksFeatureGridFeatures]
}

union PageBlocks = PageBlocksTextBlock | PageBlocksStatsBlock | PageBlocksFeatureGrid

type Page implements Node & Document {
  title: String!
  description: String
  hero: PageHero
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageHeroButtonsFilter {
  text: StringFilter
  href: StringFilter
  style: StringFilter
}

input PageHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  buttons: PageHeroButtonsFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksTextBlockFilter {
  title: StringFilter
  content: RichTextFilter
  background: StringFilter
}

input PageBlocksStatsBlockStatsFilter {
  number: StringFilter
  label: StringFilter
  description: StringFilter
}

input PageBlocksStatsBlockFilter {
  title: StringFilter
  subtitle: StringFilter
  stats: PageBlocksStatsBlockStatsFilter
}

input PageBlocksFeatureGridFeaturesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input PageBlocksFeatureGridFilter {
  title: StringFilter
  subtitle: StringFilter
  columns: StringFilter
  features: PageBlocksFeatureGridFeaturesFilter
}

input PageBlocksFilter {
  textBlock: PageBlocksTextBlockFilter
  statsBlock: PageBlocksStatsBlockFilter
  featureGrid: PageBlocksFeatureGridFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  hero: PageHeroFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
}

input PageHeroButtonsMutation {
  text: String
  href: String
  style: String
}

input PageHeroMutation {
  title: String
  subtitle: String
  buttons: [PageHeroButtonsMutation]
}

input PageBlocksTextBlockMutation {
  title: String
  content: JSON
  background: String
}

input PageBlocksStatsBlockStatsMutation {
  number: String
  label: String
  description: String
}

input PageBlocksStatsBlockMutation {
  title: String
  subtitle: String
  stats: [PageBlocksStatsBlockStatsMutation]
}

input PageBlocksFeatureGridFeaturesMutation {
  title: String
  description: String
  icon: String
}

input PageBlocksFeatureGridMutation {
  title: String
  subtitle: String
  columns: String
  features: [PageBlocksFeatureGridFeaturesMutation]
}

input PageBlocksMutation {
  textBlock: PageBlocksTextBlockMutation
  statsBlock: PageBlocksStatsBlockMutation
  featureGrid: PageBlocksFeatureGridMutation
}

input PageMutation {
  title: String
  description: String
  hero: PageHeroMutation
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
