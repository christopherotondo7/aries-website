# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  data_post(relativePath: String): Data_post!
  data_postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Data_postFilter): Data_postConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  site_content(relativePath: String): Site_content!
  site_contentConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Site_contentFilter): Site_contentConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
}

input DocumentFilter {
  data_post: Data_postFilter
  pages: PagesFilter
  site_content: Site_contentFilter
  post: PostFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Data_post | Pages | Site_content | Post | Folder

type Data_post implements Node & Document {
  title: String!
  date: String
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input Data_postFilter {
  title: StringFilter
  date: DatetimeFilter
  description: StringFilter
  body: RichTextFilter
}

type Data_postConnectionEdges {
  cursor: String!
  node: Data_post
}

type Data_postConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Data_postConnectionEdges]
}

type PagesHero {
  title: String
  subtitle: String
  image: String
  video: String
  videoPoster: String
}

type PagesSectionsIntro {
  title: String
  content: JSON
}

type PagesSectionsStatsStats {
  label: String
  value: String
}

type PagesSectionsStats {
  title: String
  stats: [PagesSectionsStatsStats]
}

type PagesSectionsValuesItems {
  title: String
  description: String
  icon: String
}

type PagesSectionsValues {
  title: String
  items: [PagesSectionsValuesItems]
}

type PagesSectionsImage_textImage {
  src: String
  alt: String
}

type PagesSectionsImage_textButton {
  text: String
  href: String
  style: String
}

type PagesSectionsImage_text {
  title: String
  subtitle: String
  content: JSON
  highlight: String
  image: PagesSectionsImage_textImage
  button: PagesSectionsImage_textButton
}

type PagesSectionsCtaButton {
  text: String
  href: String
  style: String
}

type PagesSectionsCta {
  title: String
  content: JSON
  button: PagesSectionsCtaButton
}

union PagesSections = PagesSectionsIntro | PagesSectionsStats | PagesSectionsValues | PagesSectionsImage_text | PagesSectionsCta

type Pages implements Node & Document {
  title: String!
  description: String
  hero: PagesHero
  sections: [PagesSections]
  mission: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PagesHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  image: ImageFilter
  video: StringFilter
  videoPoster: ImageFilter
}

input PagesSectionsIntroFilter {
  title: StringFilter
  content: RichTextFilter
}

input PagesSectionsStatsStatsFilter {
  label: StringFilter
  value: StringFilter
}

input PagesSectionsStatsFilter {
  title: StringFilter
  stats: PagesSectionsStatsStatsFilter
}

input PagesSectionsValuesItemsFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input PagesSectionsValuesFilter {
  title: StringFilter
  items: PagesSectionsValuesItemsFilter
}

input PagesSectionsImage_textImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PagesSectionsImage_textButtonFilter {
  text: StringFilter
  href: StringFilter
  style: StringFilter
}

input PagesSectionsImage_textFilter {
  title: StringFilter
  subtitle: StringFilter
  content: RichTextFilter
  highlight: StringFilter
  image: PagesSectionsImage_textImageFilter
  button: PagesSectionsImage_textButtonFilter
}

input PagesSectionsCtaButtonFilter {
  text: StringFilter
  href: StringFilter
  style: StringFilter
}

input PagesSectionsCtaFilter {
  title: StringFilter
  content: RichTextFilter
  button: PagesSectionsCtaButtonFilter
}

input PagesSectionsFilter {
  intro: PagesSectionsIntroFilter
  stats: PagesSectionsStatsFilter
  values: PagesSectionsValuesFilter
  image_text: PagesSectionsImage_textFilter
  cta: PagesSectionsCtaFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  hero: PagesHeroFilter
  sections: PagesSectionsFilter
  mission: StringFilter
  body: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Site_content implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Site_contentFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type Site_contentConnectionEdges {
  cursor: String!
  node: Site_content
}

type Site_contentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Site_contentConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostFilter {
  title: StringFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateData_post(relativePath: String!, params: Data_postMutation!): Data_post!
  createData_post(relativePath: String!, params: Data_postMutation!): Data_post!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateSite_content(relativePath: String!, params: Site_contentMutation!): Site_content!
  createSite_content(relativePath: String!, params: Site_contentMutation!): Site_content!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentUpdateMutation {
  data_post: Data_postMutation
  pages: PagesMutation
  site_content: Site_contentMutation
  post: PostMutation
  relativePath: String
}

input DocumentMutation {
  data_post: Data_postMutation
  pages: PagesMutation
  site_content: Site_contentMutation
  post: PostMutation
}

input Data_postMutation {
  title: String
  date: String
  description: String
  body: JSON
}

input PagesHeroMutation {
  title: String
  subtitle: String
  image: String
  video: String
  videoPoster: String
}

input PagesSectionsIntroMutation {
  title: String
  content: JSON
}

input PagesSectionsStatsStatsMutation {
  label: String
  value: String
}

input PagesSectionsStatsMutation {
  title: String
  stats: [PagesSectionsStatsStatsMutation]
}

input PagesSectionsValuesItemsMutation {
  title: String
  description: String
  icon: String
}

input PagesSectionsValuesMutation {
  title: String
  items: [PagesSectionsValuesItemsMutation]
}

input PagesSectionsImage_textImageMutation {
  src: String
  alt: String
}

input PagesSectionsImage_textButtonMutation {
  text: String
  href: String
  style: String
}

input PagesSectionsImage_textMutation {
  title: String
  subtitle: String
  content: JSON
  highlight: String
  image: PagesSectionsImage_textImageMutation
  button: PagesSectionsImage_textButtonMutation
}

input PagesSectionsCtaButtonMutation {
  text: String
  href: String
  style: String
}

input PagesSectionsCtaMutation {
  title: String
  content: JSON
  button: PagesSectionsCtaButtonMutation
}

input PagesSectionsMutation {
  intro: PagesSectionsIntroMutation
  stats: PagesSectionsStatsMutation
  values: PagesSectionsValuesMutation
  image_text: PagesSectionsImage_textMutation
  cta: PagesSectionsCtaMutation
}

input PagesMutation {
  title: String
  description: String
  hero: PagesHeroMutation
  sections: [PagesSectionsMutation]
  mission: String
  body: JSON
}

input Site_contentMutation {
  title: String
  description: String
  body: JSON
}

input PostMutation {
  title: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
