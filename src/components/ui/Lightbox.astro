---
export interface Props {
  id?: string;
}

const { id = 'lightbox' } = Astro.props;
---

<div id={id} class="lightbox fixed inset-0 bg-black/90 z-50 hidden items-center justify-center">
  <div class="relative max-w-6xl max-h-[90vh] mx-4">
    <!-- Close button -->
    <button class="lightbox-close absolute -top-12 right-0 text-white text-4xl hover:text-gray-300 z-10">
      ×
    </button>
    
    <!-- Previous button -->
    <button class="lightbox-prev absolute left-4 top-1/2 -translate-y-1/2 text-white text-6xl hover:text-gray-300 z-10 bg-black/30 rounded-full w-16 h-16 flex items-center justify-center">
      ‹
    </button>
    
    <!-- Next button -->
    <button class="lightbox-next absolute right-4 top-1/2 -translate-y-1/2 text-white text-6xl hover:text-gray-300 z-10 bg-black/30 rounded-full w-16 h-16 flex items-center justify-center">
      ›
    </button>
    
    <!-- Image container -->
    <div class="lightbox-image-container">
      <img class="lightbox-image max-w-full max-h-[90vh] object-contain" src="" alt="" />
    </div>
    
    <!-- Caption -->
    <div class="lightbox-caption text-white text-center mt-4 text-lg">
      <h3 class="lightbox-title font-bold"></h3>
      <p class="lightbox-subtitle text-gray-300"></p>
    </div>
    
    <!-- Image counter -->
    <div class="lightbox-counter absolute top-4 left-4 text-white bg-black/50 px-3 py-1 rounded">
      <span class="current">1</span> / <span class="total">1</span>
    </div>
  </div>
</div>

<script>
  function initLightbox() {
    const lightbox = document.getElementById('portfolio-lightbox');
    if (!lightbox) {
      console.error('Lightbox element not found');
      return null;
    }
    
    const image = lightbox.querySelector('.lightbox-image');
    const title = lightbox.querySelector('.lightbox-title');
    const subtitle = lightbox.querySelector('.lightbox-subtitle');
    const current = lightbox.querySelector('.current');
    const total = lightbox.querySelector('.total');
    const closeBtn = lightbox.querySelector('.lightbox-close');
    const prevBtn = lightbox.querySelector('.lightbox-prev');
    const nextBtn = lightbox.querySelector('.lightbox-next');
    
    let images = [];
    let currentIndex = 0;
    
    // Close functionality
    function closeLightbox() {
      lightbox.classList.add('hidden');
      lightbox.classList.remove('flex');
      document.body.style.overflow = '';
    }
    
    // Navigation
    function prevImage() {
      if (images.length === 0) return;
      currentIndex = currentIndex > 0 ? currentIndex - 1 : images.length - 1;
      showCurrentImage();
    }
    
    function nextImage() {
      if (images.length === 0) return;
      currentIndex = currentIndex < images.length - 1 ? currentIndex + 1 : 0;
      showCurrentImage();
    }
    
    function showCurrentImage() {
      if (!images || images.length === 0 || !image) return;
      
      const imageData = images[currentIndex];
      if (!imageData) return;
      
      image.src = imageData.src;
      image.alt = imageData.alt || imageData.title || '';
      
      if (title) title.textContent = imageData.title || '';
      if (subtitle) subtitle.textContent = imageData.subtitle || '';
      if (current) current.textContent = (currentIndex + 1).toString();
    }
    
    // Event listeners
    if (closeBtn) {
      closeBtn.addEventListener('click', closeLightbox);
    }
    
    lightbox.addEventListener('click', function(e) {
      if (e.target === lightbox) closeLightbox();
    });
    
    if (prevBtn) {
      prevBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        prevImage();
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        nextImage();
      });
    }
    
    // Keyboard events
    document.addEventListener('keydown', function(e) {
      if (!lightbox.classList.contains('hidden')) {
        if (e.key === 'Escape') closeLightbox();
        if (e.key === 'ArrowLeft') prevImage();
        if (e.key === 'ArrowRight') nextImage();
      }
    });
    
    // Public API
    return {
      open: function(imageArray, startIndex) {
        if (!imageArray || imageArray.length === 0) {
          console.error('No images provided to lightbox');
          return;
        }
        
        console.log('Opening lightbox with', imageArray.length, 'images, starting at index', startIndex || 0);
        
        images = imageArray;
        currentIndex = Math.max(0, Math.min(startIndex || 0, images.length - 1));
        
        if (total) total.textContent = images.length.toString();
        
        showCurrentImage();
        lightbox.classList.remove('hidden');
        lightbox.classList.add('flex');
        document.body.style.overflow = 'hidden';
      },
      close: closeLightbox
    };
  }
  
  // Initialize lightbox
  function setupLightbox() {
    console.log('Setting up lightbox...');
    const lightboxInstance = initLightbox();
    
    if (lightboxInstance) {
      window.lightbox = lightboxInstance;
      console.log('Lightbox available globally');
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupLightbox);
  } else {
    setupLightbox();
  }
  
  // Fallback
  setTimeout(setupLightbox, 100);
</script>