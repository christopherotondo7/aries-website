---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';

export interface ProductSlide {
  title: string;
  description: string;
  image: {
    src: string;
    alt: string;
  };
  imagePosition?: 'left' | 'right';
  gradient?: string;
  button?: {
    text: string;
    href: string;
    variant?: string;
  };
}

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  slides: ProductSlide[];
  id?: string;
  isDark?: boolean;
  classes?: Record<string, string>;
  bg?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  slides = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Default gradients for slides if not specified
const defaultGradients = [
  'from-blue-600 via-purple-600 to-indigo-700',
  'from-emerald-600 via-teal-600 to-cyan-700',
  'from-orange-600 via-red-600 to-pink-700',
  'from-violet-600 via-purple-600 to-fuchsia-700',
  'from-slate-600 via-gray-600 to-zinc-700',
];
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  
  <!-- Product Slider -->
  <div class="product-slider-container relative overflow-hidden rounded-2xl shadow-2xl">
    <!-- Background gradients -->
    {slides.map((slide, index) => (
      <div 
        class={`absolute inset-0 bg-gradient-to-br transition-opacity duration-700 ease-in-out ${
          slide.gradient || defaultGradients[index % defaultGradients.length]
        } ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
        data-slide-bg={index}
      ></div>
    ))}
    
    <!-- Dark overlay -->
    <div class="absolute inset-0 bg-black bg-opacity-30"></div>
    
    <!-- Slides -->
    <div class="relative min-h-[500px] flex items-center py-12">
      {slides.map((slide, index) => (
        <div 
          class={`slide absolute inset-0 transition-transform duration-700 ease-in-out ${
            index === 0 ? 'translate-x-0' : 'translate-x-full'
          }`}
          data-slide={index}
        >
          <div class={`container mx-auto px-6 h-full flex items-center gap-12 ${
            slide.imagePosition === 'right' ? 'flex-row-reverse' : 'flex-row'
          }`}>
            <!-- Text Content -->
            <div class="w-1/2 text-white">
              <h3 class="text-4xl md:text-5xl font-bold mb-6 leading-tight">
                {slide.title}
              </h3>
              <p class="text-xl md:text-2xl mb-8 leading-relaxed text-gray-100">
                {slide.description}
              </p>
              {slide.button && (
                <Button 
                  variant={slide.button.variant || "primary"}
                  href={slide.button.href}
                  class="text-lg px-8 py-4"
                >
                  {slide.button.text}
                </Button>
              )}
            </div>
            
            <!-- Image -->
            <div class="w-1/2">
              <div class="relative">
                <img
                  src={slide.image.src}
                  alt={slide.image.alt}
                  class="w-full h-auto rounded-xl shadow-2xl object-cover max-h-96"
                  loading={index === 0 ? 'eager' : 'lazy'}
                />
                <!-- Subtle image overlay -->
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-xl"></div>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Navigation Controls -->
    {slides.length > 1 && (
      <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3">
        {slides.map((_, index) => (
          <button
            class={`w-3 h-3 rounded-full transition-all duration-300 ${
              index === 0 ? 'bg-white scale-125' : 'bg-white/50 hover:bg-white/75'
            }`}
            data-slide-indicator={index}
            aria-label={`Go to slide ${index + 1}`}
          ></button>
        ))}
      </div>
    )}
    
    <!-- Arrow Navigation -->
    {slides.length > 1 && (
      <>
        <button 
          class="absolute left-6 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full p-3 transition-all duration-300 group"
          data-slide-prev
          aria-label="Previous slide"
        >
          <Icon name="tabler:chevron-left" class="w-6 h-6 text-white group-hover:scale-110 transition-transform" />
        </button>
        <button 
          class="absolute right-6 top-1/2 transform -translate-y-1/2 bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full p-3 transition-all duration-300 group"
          data-slide-next
          aria-label="Next slide"
        >
          <Icon name="tabler:chevron-right" class="w-6 h-6 text-white group-hover:scale-110 transition-transform" />
        </button>
      </>
    )}
  </div>
</WidgetWrapper>

<!-- Slider JavaScript -->
<script>
  class ProductSlider {
    constructor(container) {
      this.container = container;
      this.slides = container.querySelectorAll('[data-slide]');
      this.backgrounds = container.querySelectorAll('[data-slide-bg]');
      this.indicators = container.querySelectorAll('[data-slide-indicator]');
      this.prevBtn = container.querySelector('[data-slide-prev]');
      this.nextBtn = container.querySelector('[data-slide-next]');
      this.currentSlide = 0;
      this.isTransitioning = false;
      this.autoplayInterval = null;
      
      this.init();
    }
    
    init() {
      // Add event listeners
      if (this.prevBtn) this.prevBtn.addEventListener('click', () => this.prev());
      if (this.nextBtn) this.nextBtn.addEventListener('click', () => this.next());
      
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Auto-play functionality
      this.startAutoplay();
      
      // Pause autoplay on hover
      this.container.addEventListener('mouseenter', () => this.stopAutoplay());
      this.container.addEventListener('mouseleave', () => this.startAutoplay());
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prev();
        if (e.key === 'ArrowRight') this.next();
      });
    }
    
    goToSlide(index) {
      if (this.isTransitioning || index === this.currentSlide) return;
      
      this.isTransitioning = true;
      const prevSlide = this.currentSlide;
      this.currentSlide = index;
      const isNext = index > prevSlide;
      
      // Position new slide off-screen in the correct direction
      this.slides[index].style.transform = isNext ? 'translateX(100%)' : 'translateX(-100%)';
      this.slides[index].style.transition = 'none';
      
      // Force reflow
      this.slides[index].offsetHeight;
      
      // Re-enable transitions
      this.slides[index].style.transition = 'transform 700ms ease-in-out';
      
      // Animate both slides
      setTimeout(() => {
        this.slides[prevSlide].style.transform = isNext ? 'translateX(-100%)' : 'translateX(100%)';
        this.slides[index].style.transform = 'translateX(0)';
      }, 10);
      
      // Update backgrounds
      this.backgrounds[prevSlide].style.opacity = '0';
      this.backgrounds[index].style.opacity = '1';
      
      // Update indicators
      this.indicators.forEach((indicator, i) => {
        if (i === index) {
          indicator.classList.add('bg-white', 'scale-125');
          indicator.classList.remove('bg-white/50');
        } else {
          indicator.classList.remove('bg-white', 'scale-125');
          indicator.classList.add('bg-white/50');
        }
      });
      
      // Reset transition lock
      setTimeout(() => {
        this.isTransitioning = false;
        // Reset non-active slides position
        this.slides.forEach((slide, i) => {
          if (i !== index) {
            slide.style.transform = 'translateX(100%)';
            slide.style.transition = 'none';
          }
        });
      }, 700);
    }
    
    next() {
      const nextIndex = (this.currentSlide + 1) % this.slides.length;
      this.goToSlide(nextIndex);
    }
    
    prev() {
      const prevIndex = (this.currentSlide - 1 + this.slides.length) % this.slides.length;
      this.goToSlide(prevIndex);
    }
    
    startAutoplay() {
      this.stopAutoplay();
      this.autoplayInterval = setInterval(() => this.next(), 8000); // 8 seconds
    }
    
    stopAutoplay() {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }
  }
  
  // Initialize all product sliders
  document.addEventListener('DOMContentLoaded', () => {
    const sliders = document.querySelectorAll('.product-slider-container');
    sliders.forEach(slider => new ProductSlider(slider));
  });
  
  // Also initialize on page show (for back/forward navigation)
  window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
      const sliders = document.querySelectorAll('.product-slider-container');
      sliders.forEach(slider => new ProductSlider(slider));
    }
  });
</script>

<style>
  .product-slider-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }
  
  .slide {
    backface-visibility: hidden;
  }
  
  @media (max-width: 768px) {
    .slide .container {
      flex-direction: column !important;
      text-align: center;
      gap: 2rem !important;
    }
    
    .slide .w-1/2 {
      width: 100% !important;
    }
    
    .product-slider-container {
      min-height: 500px;
    }
  }
</style>