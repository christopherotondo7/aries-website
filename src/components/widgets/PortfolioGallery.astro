---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';
import Image from '~/components/common/Image.astro';
import Lightbox from '~/components/ui/Lightbox.astro';

export interface PortfolioItem {
  image: string;
  title: string;
  subtitle?: string;
  category: string;
}

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  tagline?: string;
  items?: Array<PortfolioItem>;
  columns?: number;
  categories?: Array<{label: string, value: string}>;
  isDark?: boolean;
  classes?: Record<string, string>;
  bg?: string;
}

const {
  id,
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 3,
  categories = [],
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Auto-generate categories if not provided
const autoCategories = categories.length > 0 ? categories : [
  { label: 'All', value: 'all' },
  ...Array.from(new Set(items.map(item => item.category))).map(cat => ({
    label: cat.charAt(0).toUpperCase() + cat.slice(1),
    value: cat
  }))
];

const gridCols = {
  2: 'grid-cols-1 md:grid-cols-2',
  3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
  4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4',
  5: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5',
  6: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6',
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
  
  <!-- Filter Buttons -->
  <div class="flex flex-wrap justify-center gap-2 mb-8">
    {autoCategories.map((category) => (
      <button 
        class="portfolio-filter px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 border-2 hover:scale-105 active"
        data-category={category.value}
      >
        {category.label}
      </button>
    ))}
  </div>
  
  <!-- Portfolio Grid -->
  <div class={`portfolio-grid grid ${gridCols[columns] || 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3'} gap-6`}>
    {items.map((item, index) => (
      <div 
        class="portfolio-item group relative cursor-pointer"
        data-category={item.category}
        data-image={item.image}
        data-title={item.title}
        data-subtitle={item.subtitle || ''}
        data-index={index}
      >
        <div class="relative aspect-[4/3] overflow-hidden rounded-lg">
          <Image
            src={item.image}
            alt={item.title}
            class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
            widths={[400, 800]}
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            loading={index < 6 ? "eager" : "lazy"}
          />
          
          <!-- Overlay -->
          <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
          
          <!-- Plus icon -->
          <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <div class="bg-white/90 rounded-full w-16 h-16 flex items-center justify-center">
              <svg class="w-8 h-8 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
              </svg>
            </div>
          </div>
          
          <!-- Text overlay -->
          <div class="absolute bottom-0 left-0 right-0 p-6 text-white transform translate-y-4 group-hover:translate-y-0 opacity-0 group-hover:opacity-100 transition-all duration-300">
            <h3 class="text-xl font-bold mb-1">{item.title}</h3>
            {item.subtitle && (
              <p class="text-sm text-gray-200">{item.subtitle}</p>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Lightbox -->
  <Lightbox id="portfolio-lightbox" />
</WidgetWrapper>

<style>
  .portfolio-filter {
    @apply bg-white dark:bg-slate-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-slate-600;
  }
  
  .portfolio-filter.active,
  .portfolio-filter:hover {
    @apply bg-primary text-white border-primary;
  }
  
  .portfolio-item {
    opacity: 1;
    transform: scale(1);
    transition: all 0.5s ease;
  }
  
  .portfolio-item.hidden {
    opacity: 0;
    transform: scale(0.8);
    pointer-events: none;
  }
</style>

<script>
  // Simple portfolio functionality without TypeScript
  function initPortfolioGallery() {
    const items = document.querySelectorAll('.portfolio-item');
    const filters = document.querySelectorAll('.portfolio-filter');
    
    console.log('Found', items.length, 'portfolio items and', filters.length, 'filters');
    
    // Filter functionality
    filters.forEach(function(filter) {
      filter.addEventListener('click', function() {
        const category = this.dataset.category;
        console.log('Filter clicked:', category);
        
        // Update active filter
        filters.forEach(function(f) {
          f.classList.remove('active');
        });
        this.classList.add('active');
        
        // Filter items
        items.forEach(function(item) {
          const itemCategory = item.dataset.category;
          const shouldShow = category === 'all' || itemCategory === category;
          
          if (shouldShow) {
            item.classList.remove('hidden');
          } else {
            item.classList.add('hidden');
          }
        });
      });
    });
    
    // Lightbox functionality
    items.forEach(function(item, index) {
      item.addEventListener('click', function() {
        console.log('Portfolio item clicked:', this.dataset.title);
        
        // Get all visible items for the slideshow
        const visibleItems = Array.from(items).filter(function(item) {
          return !item.classList.contains('hidden');
        });
        
        // Create images array for lightbox
        const images = visibleItems.map(function(item) {
          return {
            src: item.dataset.image,
            alt: item.dataset.title,
            title: item.dataset.title,
            subtitle: item.dataset.subtitle || ''
          };
        });
        
        // Find the clicked item's index in visible items
        const clickedIndex = visibleItems.indexOf(this);
        
        // Open lightbox
        if (window.lightbox) {
          console.log('Opening lightbox with', images.length, 'images, starting at index', clickedIndex);
          window.lightbox.open(images, clickedIndex);
        } else {
          console.error('Lightbox not available');
          // Fallback: try to initialize lightbox
          setTimeout(function() {
            if (window.lightbox) {
              window.lightbox.open(images, clickedIndex);
            }
          }, 100);
        }
      });
    });
    
    // Set initial active filter
    const allFilter = document.querySelector('.portfolio-filter[data-category="all"]');
    if (allFilter) {
      allFilter.classList.add('active');
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPortfolioGallery);
  } else {
    initPortfolioGallery();
  }
  
  // Fallback initialization
  setTimeout(initPortfolioGallery, 200);
</script>